# working nginx-conf - 15.11.2021 flask.wyl-online.de

http {
    upstream voskbridgeserver {
        server 127.0.0.1:5000;
    }


    include       mime.types;
    default_type  application/octet-stream;
    
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {

        server_name flask.wyl-online.de;
        
        # include general.conf;

        listen 443 ssl http2; # managed by Certbot
        ssl_certificate /etc/letsencrypt/live/flask.wyl-online.de/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/flask.wyl-online.de/privkey.pem;
        ssl_session_timeout 5m;
        
            # intermediate configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;
        
          # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        
        #include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        # ssl_dhparam /etc/nginx/dhparam_mozilla; # managed by Certbot
        
        # replace with the IP address of your resolver
        resolver 127.0.0.1;
        
        location / {
            proxy_pass http://voskbridgeserver;
        }

        location /socket.io {       
            proxy_pass http://voskbridgeserver/socket.io;
          proxy_http_version 1.1;
          proxy_buffering off;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "Upgrade";
          proxy_set_header Host $http_host;
          proxy_set_header X-Forwarded-Host $http_host;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        location / {
            return 301 https://$host$request_uri;
        }
    }

}
